https://chat.openai.com/c/8b2acedc-8be0-4272-9a9a-cd0a2eebb032
https://blogs.oracle.com/javamagazine/post/annotations-an-inside-look

Annotations are special markers that provide metadata about your classes, methods, fields
They can also have additional information inside parentheses, which is called annotation parameters.
Annotations can carry attribute values or they can be simply marker annotation

3 types:

compile time - 
processed during the compilation phase by the Java compiler, 
don't directly influence the generated bytecode or the final compiled classes, instead, they guide the compiler's behavior.
annotations like SuppressWarnings and Deprecated are typically processed by the Java compiler, as it has its own builtin annotation proccessors


build time - 
influence the generation of code, resources, or other artifacts during the build process, 
not processed by the Java compiler but rather by build tools or custom annotation processors


run time -  available and can be accessed during the execution of your program, 
they are included in your source code and become part of your compiled classes
they are processed while your program is running which means that they can be used to customize the behavior of your code during its execution
at runtime, you can use the Java Reflection API to retrieve and process annotations
basically, these annotations provide a way to attach metadata which can be used to dynamically determine how certain parts of the code should behave, they do not modify the actual source code or bytecode of your program


compile-time / build-time annotations are processed by Annotation Processors
run-time annotations are mostly processed by External frameworks & libraries